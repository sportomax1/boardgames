fetch-bgg-library:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Fetch BGG library data
        run: |
          # Fetch data from the API
          echo "Fetching BGG library data..."
          
          # Initialize variables
          ITEMS_PER_PAGE=100
          BASE_URL="https://tabletop.events/api/library/0AEB11DA-2B7D-11EC-B400-855F800FD618/librarygames"
          
          # Get first page to determine total items
          FIRST_PAGE=$(curl -s "${BASE_URL}?_page_number=1&_items_per_page=${ITEMS_PER_PAGE}")
          TOTAL_ITEMS=$(echo "$FIRST_PAGE" | jq -r '.result.paging.total_items')
          TOTAL_PAGES=$(( (TOTAL_ITEMS + ITEMS_PER_PAGE - 1) / ITEMS_PER_PAGE ))
          
          echo "Total items: $TOTAL_ITEMS"
          echo "Total pages: $TOTAL_PAGES"
          
          # Fetch all pages and combine
          ALL_GAMES="[]"
          for ((page=1; page<=TOTAL_PAGES; page++)); do
            echo "Fetching page $page of $TOTAL_PAGES..."
            PAGE_DATA=$(curl -s "${BASE_URL}?_page_number=${page}&_items_per_page=${ITEMS_PER_PAGE}")
            PAGE_GAMES=$(echo "$PAGE_DATA" | jq -r '.result.items')
            ALL_GAMES=$(echo "$ALL_GAMES" | jq --argjson new "$PAGE_GAMES" '. + $new')
          done
          
          # Save as JSON temporarily
          echo "$ALL_GAMES" > bgg_data.json
          echo "Data fetched successfully!"
          
      - name: Convert JSON to XML
        run: |
          node << 'EOF'
          const fs = require('fs');
          
          // Read the JSON data
          const games = JSON.parse(fs.readFileSync('bgg_data.json', 'utf8'));
          
          // Function to escape XML special characters
          function escapeXml(str) {
            if (str === null || str === undefined) return '';
            return String(str)
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;')
              .replace(/'/g, '&apos;');
          }
          
          // Function to extract custom field value
          function getCustomField(game, fieldName) {
            return game.custom_fields && game.custom_fields[fieldName] 
              ? escapeXml(game.custom_fields[fieldName]) 
              : '';
          }
          
          // Build XML
          let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
          xml += '<bgg_library>\n';
          xml += `  <metadata>\n`;
          xml += `    <total_items>${games.length}</total_items>\n`;
          xml += `    <last_updated>${new Date().toISOString()}</last_updated>\n`;
          xml += `  </metadata>\n`;
          xml += '  <games>\n';
          
          games.forEach(game => {
            xml += '    <game>\n';
            xml += `      <bgg_id>${escapeXml(game.bgg_id)}</bgg_id>\n`;
            xml += `      <name>${escapeXml(game.name)}</name>\n`;
            xml += `      <age>${escapeXml(game.age)}</age>\n`;
            xml += `      <library_id>${escapeXml(game.library_id)}</library_id>\n`;
            xml += `      <notes>${escapeXml(game.notes)}</notes>\n`;
            xml += `      <checkout_count>${escapeXml(game.checkout_count)}</checkout_count>\n`;
            xml += `      <last_checkin_date>${escapeXml(game.last_checkin_date)}</last_checkin_date>\n`;
            xml += `      <object_type>${escapeXml(game.object_type)}</object_type>\n`;
            xml += `      <game_weight>${escapeXml(game.game_weight)}</game_weight>\n`;
            xml += `      <view_uri>${escapeXml(game.view_uri)}</view_uri>\n`;
            xml += `      <max_play_time>${escapeXml(game.max_play_time)}</max_play_time>\n`;
            xml += `      <missing_components>${escapeXml(game.missing_components)}</missing_components>\n`;
            xml += `      <uri_part>${escapeXml(game.uri_part)}</uri_part>\n`;
            xml += `      <condition_notes>${escapeXml(game.condition_notes)}</condition_notes>\n`;
            xml += `      <catalog_number>${escapeXml(game.catalog_number)}</catalog_number>\n`;
            xml += `      <object_name>${escapeXml(game.object_name)}</object_name>\n`;
            xml += `      <is_checked_out>${escapeXml(game.is_checked_out)}</is_checked_out>\n`;
            xml += `      <overall_condition>${escapeXml(game.overall_condition)}</overall_condition>\n`;
            xml += `      <is_in_circulation>${escapeXml(game.is_in_circulation)}</is_in_circulation>\n`;
            xml += `      <lastcheckout_id>${escapeXml(game.lastcheckout_id)}</lastcheckout_id>\n`;
            xml += `      <box_unacceptable>${escapeXml(game.box_unacceptable)}</box_unacceptable>\n`;
            xml += `      <max_players>${escapeXml(game.max_players)}</max_players>\n`;
            xml += `      <publisher_name>${escapeXml(game.publisher_name)}</publisher_name>\n`;
            xml += `      <last_checkout_date>${escapeXml(game.last_checkout_date)}</last_checkout_date>\n`;
            xml += `      <due_for_triage>${escapeXml(game.due_for_triage)}</due_for_triage>\n`;
            xml += `      <item_type>${getCustomField(game, 'ItemType')}</item_type>\n`;
            xml += `      <bgg_rank>${getCustomField(game, 'BGGRank')}</bgg_rank>\n`;
            xml += `      <storage_location>${getCustomField(game, 'StorageLocation')}</storage_location>\n`;
            xml += `      <also_requires>${getCustomField(game, 'AlsoRequires')}</also_requires>\n`;
            xml += `      <average_seconds_checked_out>${escapeXml(game.average_seconds_checked_out)}</average_seconds_checked_out>\n`;
            xml += `      <date_created>${escapeXml(game.date_created)}</date_created>\n`;
            xml += `      <date_updated>${escapeXml(game.date_updated)}</date_updated>\n`;
            xml += `      <min_play_time>${escapeXml(game.min_play_time)}</min_play_time>\n`;
            xml += `      <min_players>${escapeXml(game.min_players)}</min_players>\n`;
            xml += `      <missing_instructions>${escapeXml(game.missing_instructions)}</missing_instructions>\n`;
            xml += `      <id>${escapeXml(game.id)}</id>\n`;
            xml += `      <description>${escapeXml(game.description)}</description>\n`;
            xml += `      <is_play_to_win>${escapeXml(game.is_play_to_win)}</is_play_to_win>\n`;
            xml += `      <location>${getCustomField(game, 'Location')}</location>\n`;
            xml += '    </game>\n';
          });
          
          xml += '  </games>\n';
          xml += '</bgg_library>';
          
          // Write XML file
          fs.writeFileSync('bggcon.xml', xml);
          console.log('XML file created successfully!');
          EOF
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bgg-library-data
          path: bggcon.xml
          retention-days: 30
